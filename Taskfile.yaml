version: "3"

vars:
  PATH_WORKSPACE: "{{ .HOME }}/.workspace"
  PATH_LOCAL: "{{ .HOME }}/.local"
  PATH_LOCAL_BIN: "{{ .PATH_LOCAL }}/bin"
  PATH_CONFIG: "{{ .HOME }}/.config"
  PATH_APPLICATION_SUPPORT: "{{ .HOME }}/Library/Application Support"

tasks:
  # operations
  # ---------------------------------------------------------------------------
  update/submodules:
    desc: Update git submodules
    cmds:
      - git submodule update --init --remote
      - git status

  collect:
    desc: Collect all configs
    deps:
      - collect/config/git
      - collect/config/k9s
      - collect/config/neovim
      - collect/config/tmux
      - collect/config/zsh
      - collect/python/workspace

  install/all:
    desc: Install all environments
    deps:
      - install/config/bat
      - install/config/git
      - install/config/k9s
      - install/env/neovim
      - install/env/tmux
      - install/env/zsh
      - install/git-ilog
      - install/python/workspace
      - install/toolkit/python-tools
      - install/toolkit/repo-scripts

  # helper functions
  # ---------------------------------------------------------------------------
  helper/checkout-submodule:
    label: checkout-submodule[{{ .DIR }}]
    internal: true
    cmds:
      - git submodule update --init {{ .DIR }}
    status:
      - "[[ -n $SKIP_SUBMODULE_CHECKOUT ]]"

  helper/copy-config-dir:
    label: copy-config-dir[{{ .NAME }}]
    internal: true
    vars:
      DIR: "{{ .DIR | default .PATH_CONFIG }}"
    cmds:
      - mkdir -p '{{ .DIR }}/{{ .NAME }}'
      - cp -vaf 'config/{{ .NAME }}/'* '{{ .DIR }}/{{ .NAME }}/'

  helper/ensure-config-file-dir:
    label: ensure-dir[{{ .DIR }}]
    internal: true
    vars:
      DIR:
        sh: dirname {{ .FILE }}
    status:
      - "[[ -d {{ .DIR }} ]]"
    cmds:
      - mkdir -p {{ .DIR }}

  helper/copy-config-file:
    label: copy-config-file[{{ .DESTINATION }}]
    internal: true
    cmds:
      - task: helper/ensure-config-file-dir
        vars:
          FILE: "{{ .DESTINATION }}"
      - mv -vf '{{ .DESTINATION }}' '{{ .BACKUP }}' || true
      - cp -va '{{ .SOURCE }}' '{{ .DESTINATION }}'
    status:
      - diff '{{ .SOURCE }}' '{{ .DESTINATION }}'

  helper/show-diff:
    internal: true
    vars:
      HELPER:
        sh: |
          if type delta > /dev/null; then
            echo '| delta'
          fi
    cmds:
      - |
        if [[ ! -f '{{ .OLD }}' ]]; then
          echo 'Left side ({{ .OLD }}) not exists'
        elif [[ ! -f '{{ .NEW }}' ]]; then
          echo 'Right side ({{ .NEW }}) not exists'
        else
          diff -u '{{ .OLD }}' '{{ .NEW }}' {{ .HELPER }}
        fi

  # bat
  # ---------------------------------------------------------------------------
  install/config/bat:
    desc: Install bat config
    cmds:
      - task: helper/copy-config-dir
        vars:
          NAME: bat

  # git
  # ---------------------------------------------------------------------------
  install/config/git:
    desc: Install git config
    cmds:
      - task: diff/config/git
      - task: helper/copy-config-file
        vars:
          SOURCE: file/gitconfig
          DESTINATION: "{{ .HOME }}/.gitconfig"
          BACKUP: "{{ .HOME }}/.bak.gitconfig"
      - task: install/config/git/gitignore

  install/config/git/gitignore:
    cmds:
      - mkdir -p {{ .PATH_CONFIG }}/git
      - curl https://www.toptal.com/developers/gitignore/api/macos > {{ .PATH_CONFIG }}/git/macOS.gitignore
      - git config --global core.excludesfile {{ .PATH_CONFIG }}/git/macOS.gitignore

  diff/config/git:
    desc: Show git config diff between the currently used one and the one in this repo
    cmds:
      - task: helper/show-diff
        vars:
          NEW: file/gitconfig
          OLD: "{{ .HOME }}/.gitconfig"

  collect/config/git:
    desc: Collect git configs
    cmds:
      - cp -va '{{ .HOME }}/.gitconfig' 'file/gitconfig'

  # git-ilog
  # ---------------------------------------------------------------------------
  install/git-ilog:
    desc: Install git-ilog script
    cmds:
      - cp -va 'file/git-ilog.zsh' '{{ .PATH_LOCAL_BIN }}/git-ilog'
    status:
      - "[[ -a '{{ .PATH_LOCAL_BIN }}/git-ilog' ]]"

  # k9s
  # ---------------------------------------------------------------------------
  install/config/k9s:
    desc: Install k9s config
    cmds:
      - task: helper/copy-config-dir
        vars:
          NAME: k9s
          DIR: "{{ .PATH_APPLICATION_SUPPORT }}"

  diff/config/k9s:
    desc: Show k9s config diff between the currently used one and the one in this repo
    cmds:
      - task: helper/show-diff
        vars:
          NEW: config/k9s/config.yml
          OLD: "{{ .PATH_APPLICATION_SUPPORT }}/k9s/config.yml"

  collect/config/k9s:
    desc: Collect k9s configs
    cmds:
      - cp -va '{{ .PATH_APPLICATION_SUPPORT }}/k9s/config.yml' 'config/k9s/config.yml'

  # neovim
  # ---------------------------------------------------------------------------
  install/env/neovim:
    desc: Setup neovim environment
    deps:
      - task: helper/checkout-submodule
        vars:
          DIR: config/nvim/vim-plug
      - install/config/neovim
    cmds:
      - task: helper/copy-config-dir
        vars:
          NAME: nvim
      - task: helper/install-neovim-autoload

  helper/install-neovim-autoload:
    internal: true
    vars:
      PATH_AUTOLOAD: "{{ .PATH_LOCAL }}/share/nvim/site/autoload"
      TARGET: "{{ .PATH_AUTOLOAD }}/plug.vim"
    cmds:
      - mkdir -p {{ .PATH_AUTOLOAD }}
      - ln -s '{{ .PATH_CONFIG }}/nvim/vim-plug/plug.vim' '{{ .TARGET }}'
    status:
      - "[[ -L {{ .TARGET }} ]]"

  install/config/neovim:
    cmds:
      - task: diff/config/neovim
      - task: helper/copy-config-file
        vars:
          SOURCE: config/nvim/init.vim
          DESTINATION: "{{ .PATH_CONFIG }}/nvim/init.vim"
          BACKUP: "{{ .PATH_CONFIG }}/nvim/init.bak.vim"
      - task: update/plugin/neovim

  diff/config/neovim:
    desc: Show neovim config diff between the currently used one and the one in this repo
    cmds:
      - task: helper/show-diff
        vars:
          NEW: config/nvim/init.vim
          OLD: "{{ .PATH_CONFIG }}/nvim/init.vim"

  collect/config/neovim:
    desc: Collect neovim config
    cmds:
      - cp -va '{{ .PATH_CONFIG }}/nvim/init.vim' 'config/nvim/init.vim'

  update/plugin/neovim:
    desc: Update neovim plugins
    interactive: true
    cmds:
      - nvim '+PlugUpdate!' '+qall!'

  # tmux
  # ---------------------------------------------------------------------------
  install/env/tmux:
    desc: Install tmux config
    deps:
      - task: helper/checkout-submodule
        vars:
          DIR: config/tmux/tmux-sensible
      - task: helper/checkout-submodule
        vars:
          DIR: config/tmux/tmux-yank
    cmds:
      - task: helper/copy-config-dir
        vars:
          NAME: tmux

  collect/config/tmux:
    desc: Collect tmux config
    cmds:
      - cp -va {{ .PATH_CONFIG }}/tmux/*.tmux config/tmux/

  # toolkit
  # ---------------------------------------------------------------------------
  install/toolkit/python-tools:
    desc: Install some python-based utilities
    deps:
      - helper/local-dir
    vars:
      PATH_VENV: "{{ .PATH_LOCAL }}/python-toolkit"
    cmds:
      - python3 -m venv {{ .PATH_VENV }}
      - |
        {{ range $pip_name, $prog_name := dict
              "awscli" "aws"
              "bumpver" "bumpver"
              "bump2version" "bump2version"
              "tldr" "tldr"
        }}
        {{ $.PATH_VENV }}/bin/pip install --upgrade {{ $pip_name }}
        ln -s '{{ $.PATH_VENV }}/bin/{{ $prog_name }}' '{{ $.PATH_LOCAL_BIN }}/{{ $prog_name }}' || true
        {{- end }}

  install/toolkit/repo-scripts:
    desc: Install scripts from `bin/` directory in this directory
    cmds:
      - cp -va bin/* '{{ .PATH_LOCAL_BIN }}/'

  helper/local-dir:
    internal: true
    cmds:
      - mkdir -p {{ .PATH_LOCAL }}
      - mkdir -p {{ .PATH_LOCAL_BIN }}
    status:
      - "[[ -d {{ .PATH_LOCAL_BIN }} ]]"

  # python
  # ---------------------------------------------------------------------------
  install/python/poetry:
    cmds:
      - curl -sSL https://install.python-poetry.org | python3 -
      - poetry config virtualenvs.in-project true
      - ln -s "$POETRY_HOME/bin/poetry" '{{ .PATH_LOCAL_BIN }}/poetry' || true
    status:
      - type poetry

  install/python/workspace:
    desc: Create ~/.workspace and install utilities
    deps:
      - helper/local-dir
      - install/python/poetry
    cmds:
      - mkdir -p {{ .PATH_WORKSPACE }}
      - cp -vaf workspace/* {{ .PATH_WORKSPACE }}/
      - |
        cd {{ .PATH_WORKSPACE }}
        poetry install --sync --no-root
      - |
        {{- range $app := list
              "httpx"
              "ipython"
              "jupyter"
        }}
        ln -s '{{ $.PATH_WORKSPACE }}/.venv/bin/{{ $app }}' '{{ $.PATH_LOCAL_BIN }}/{{ $app }}' || true
        {{- end }}

  collect/python/workspace:
    desc: Collect config from workspace
    cmds:
      - cp -va {{ .PATH_WORKSPACE }}/* workspace/

  # zsh
  # ---------------------------------------------------------------------------
  install/env/zsh:
    desc: Setup zsh environment
    deps:
      - task: helper/checkout-submodule
        vars:
          DIR: config/zsh/bin
    cmds:
      - task: helper/copy-config-dir
        vars:
          NAME: zsh
      - task: install/config/zsh

  install/config/zsh:
    cmds:
      - task: diff/config/zsh
      - task: helper/copy-config-file
        vars:
          SOURCE: file/zshrc.zsh
          DESTINATION: "{{ .HOME }}/.zshrc"
          BACKUP: "{{ .HOME }}/.zshrc.bak.zsh"

  diff/config/zsh:
    desc: Show zsh config diff between the currently used one and the one in this repo
    cmds:
      - task: helper/show-diff
        vars:
          NEW: file/zshrc.zsh
          OLD: "{{ .HOME }}/.zshrc"

  collect/config/zsh:
    desc: Collect zsh config
    cmds:
      - cp -va "$HOME/.zshrc" 'file/zshrc.zsh'

  update/plugin/zsh:
    desc: Update zsh plugins
    cmds:
      - zinit update
